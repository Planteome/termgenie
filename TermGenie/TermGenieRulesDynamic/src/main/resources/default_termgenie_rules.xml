<?xml version="1.0" encoding="UTF-8"?>
<termgenietemplates xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xsi:noNamespaceSchemaLocation="default_termgenie_rules.xsd">
	<template name="all_regulation" displayname="regulation: biological_process">
		<description>Select all three subtemplates to generate terms for
			regulation, negative regulations and positive regulation (for
			biological processes). Names, synonyms and definitions are all
			generated automatically</description>
		<ontology name="GeneOntology" />
		<obonamespace>biological_process</obonamespace>
		<fields>
			<field name="target" required="true">
				<prefixes>
					<prefix>regulation</prefix>
					<prefix>negative_regulation</prefix>
					<prefix>positive_regulation</prefix>
				</prefixes>
				<ontology name="GeneOntology">
					<branch>biological_process</branch>
				</ontology>
			</field>
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var x = termgenie.getSingleTerm("target", go);
  // biological_process
  var check = termgenie.checkGenus(x, "GO:0008150", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  if (termgenie.genus(x, "GO:0065007", go)) {
    // biological regulation
    termgenie.error(
      "Cannot create 'regulation of regulation of X' terms. The term "+
      termgenie.getTermShortInfo("GO:0065007", go)+
      " is a parent of "+
      termgenie.getTermShortInfo(x, go)+
      ".");
    return;
  }
  var prefixes = termgenie.getInputs("target");
  if (!prefixes || prefixes === null || prefixes.length === 0) {
    termgenie.error("Could not create a term for X, as no prefix was selected");
    return;
  }
  var count = 0;
  if (termgenie.contains(prefixes, "regulation")) {
    var label = "regulation of "+ termgenie.name(x, go);
    var definition = "Any process that modulates the frequency, rate or extent of "+termgenie.name(x, go)+".";
    var synonyms = termgenie.synonyms("regulation of ", x, go, null, label);
    var cdef = termgenie.cdef("GO:0065007");
    cdef.differentium("regulates", x, go);
    termgenie.createTerm(label, definition, synonyms, cdef);
    count += 1;
  }
  if (termgenie.contains(prefixes, "negative_regulation")) {
    var label = "negative regulation of "+ termgenie.name(x, go);
    var definition = "Any process that stops, prevents or reduces the frequency, rate or extent of "+termgenie.name(x, go)+".";
    var synonyms = termgenie.synonyms("negative regulation of ", x, go, null, label);
    var cdef = termgenie.cdef("GO:0065007");
    cdef.differentium("negatively_regulates", x, go);
    termgenie.createTerm(label, definition, synonyms, cdef);
    count += 1;
  }
  if (termgenie.contains(prefixes, "positive_regulation")) {
    var label = "positive regulation of "+ termgenie.name(x, go);
    var definition = "Any process that activates or increases the frequency, rate or extent of "+termgenie.name(x, go)+".";
    var synonyms = termgenie.synonyms("positive regulation of ", x, go, null, label);
    var cdef = termgenie.cdef("GO:0065007");
    cdef.differentium("positively_regulates", x, go);
    termgenie.createTerm(label, definition, synonyms, cdef);
    count += 1;
  }
  if (count === 0) {
    termgenie.error("Could not create a term for X, as no known prefix was selected");
  }
};]]>
		</rule>
	</template>
	<template name="all_regulation_mf" displayname="regulation: molecular_function">
		<description>Select all three subtemplates to generate terms for
			regulation, negative regulations and positive regulation (for
			molecular functions). Names, synonyms and definitions are all
			generated automatically</description>
		<ontology name="GeneOntology" />
		<obonamespace>biological_process</obonamespace>
		<fields>
			<field name="target" required="true">
				<prefixes>
					<prefix>regulation</prefix>
					<prefix>negative_regulation</prefix>
					<prefix>positive_regulation</prefix>
				</prefixes>
				<ontology name="GeneOntology">
					<branch>molecular_function</branch>
				</ontology>
			</field>
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var x = termgenie.getSingleTerm("target", go);
  // molecular function
  var check = termgenie.checkGenus(x, "GO:0003674", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  if (termgenie.genus(x, "GO:0065007", go)) {
    // biological regulation
    termgenie.error(
      "Cannot create 'regulation of regulation of X' terms. The term "+
      termgenie.getTermShortInfo("GO:0065007", go)+
      " is a parent of "+
      termgenie.getTermShortInfo(x, go)+
      ".");
    return;
  }
  var prefixes = termgenie.getInputs("target");
  if (!prefixes || prefixes === null || prefixes.length === 0) {
    termgenie.error("Could not create a term for X, as no prefix was selected");
    return;
  }
  var count = 0;
  if (termgenie.contains(prefixes, "regulation")) {
    var label = "regulation of "+ termgenie.name(x, go);
    var definition = "Any process that modulates the frequency, rate or extent of "+termgenie.name(x, go)+".";
    var synonyms = termgenie.synonyms("regulation of ", x, go, null, label);
    var cdef = termgenie.cdef("GO:0065007");
    cdef.differentium("regulates", x, go);
    termgenie.createTerm(label, definition, synonyms, cdef);
    count += 1;
  }
  if (termgenie.contains(prefixes, "negative_regulation")) {
    var label = "negative regulation of "+ termgenie.name(x, go);
    var definition = "Any process that stops, prevents or reduces the frequency, rate or extent of "+termgenie.name(x, go)+".";
    var synonyms = termgenie.synonyms("negative regulation of ", x, go, null, label);
    var cdef = termgenie.cdef("GO:0065007");
    cdef.differentium("negatively_regulates", x, go);
    termgenie.createTerm(label, definition, synonyms, cdef);
    count += 1;
  }
  if (termgenie.contains(prefixes, "positive_regulation")) {
    var label = "positive regulation of "+ termgenie.name(x, go);
    var definition = "Any process that activates or increases the frequency, rate or extent of "+termgenie.name(x, go)+".";
    var synonyms = termgenie.synonyms("positive regulation of ", x, go, null, label);
    var cdef = termgenie.cdef("GO:0065007");
    cdef.differentium("positively_regulates", x, go);
    termgenie.createTerm(label, definition, synonyms, cdef);
    count += 1;
  }
  if (count === 0) {
    termgenie.error("Could not create a term for X, as no known prefix was selected");
  }
};]]>
		</rule>
	</template>
	<template name="involved_in">
		<description>processes involved in other processes</description>
		<hint>[part] involved in [whole]</hint>
		<ontology name="GeneOntology" />
		<obonamespace>biological_process</obonamespace>
		<requires>biological_process_xp_self.obo</requires>
		<fields>
			<field name="part" required="true">
				<ontology name="GeneOntology">
					<branch>biological_process</branch>
				</ontology>
			</field>
			<field name="whole" required="true">
				<ontology name="GeneOntology">
					<branch>biological_process</branch>
				</ontology>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run(){
  var go = GeneOntology;
  var p = termgenie.getSingleTerm("part", go);
  var w = termgenie.getSingleTerm("whole", go);
  var check = termgenie.checkGenus(p, "GO:0008150", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var check = termgenie.checkGenus(w, "GO:0008150", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(p, go) + " involved in " + termgenie.name(w, go);
  var definition = "Any "+termgenie.name(p, go)+" that is involved in "+termgenie.name(w, go)+".";
  var synonyms = termgenie.synonyms(null, p, go, " of ", w, go, null, label);
  var cdef = termgenie.cdef(p);
  cdef.differentium("part_of", w, go);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>
	<template name="occurs_in">
		<description>processes occurring in parts of the cell</description>
		<ontology name="GeneOntology" />
		<obonamespace>biological_process</obonamespace>
		<requires>biological_process_xp_cellular_component.obo</requires>
		<fields>
			<field name="process" required="true">
				<ontology name="GeneOntology">
					<branch>biological_process</branch>
				</ontology>
			</field>
			<field name="location" required="true">
				<ontology name="GeneOntology">
					<branch>cellular_component</branch>
				</ontology>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var p = termgenie.getSingleTerm("process", go);
  var c = termgenie.getSingleTerm("location", go);
  var check = termgenie.checkGenus(p, "GO:0008150", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  check = termgenie.checkGenus(c, "GO:0005575", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(p, go) + " in " + termgenie.name(c, go);
  var definition = "Any "+termgenie.name(p, go)+" that takes place in "+termgenie.name(c, go)+".";
  var synonyms = termgenie.synonyms(null, p, go, " in ", c, go, null, label);
  var cdef = termgenie.cdef(p);
  cdef.differentium("OBO_REL:occurs_in", c, go);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>
	<template name="regulation_by">
		<description>processes regulated by other regulating processes
		</description>
		<ontology name="GeneOntology" />
		<obonamespace>biological_process</obonamespace>
		<requires>biological_process_xp_self.obo</requires>
		<fields>
			<field name="process" required="true">
				<ontology name="GeneOntology">
					<branch>biological_process</branch>
				</ontology>
			</field>
			<field name="regulator" required="true">
				<ontology name="GeneOntology">
					<branch>biological_process</branch>
				</ontology>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var p = termgenie.getSingleTerm("process", go);
  var r = termgenie.getSingleTerm("regulator", go);
  var check = termgenie.checkGenus(p, "GO:0008150", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  check = termgenie.checkGenus(r, "GO:0050789", go); // regulation of biological process
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  subrun(r);
  
  var negative_r = go.getOWLObjectByLabel("negative "+termgenie.name(r, go));
  if (negative_r !== null) {
    subrun(negative_r);
  }
  
  var positive_r = go.getOWLObjectByLabel("positive "+termgenie.name(r, go));
  if (positive_r !== null) {
    subrun(positive_r);
  }
  
  function subrun(regulator) {
    var label = "regulation of "+termgenie.name(p, go) + " by " + termgenie.name(regulator, go);
    var definition = "Any process that modulates the frequency, rate or extent of "+termgenie.name(p, go)+", by "+termgenie.name(regulator, go)+".";
    var synonyms = termgenie.synonyms("regulation of ", p, go, " by ", regulator, go, null, label);
    
    // intentionally null, as the intended relations do not fit the pattern
    // but the synonyms, might be of some use
    var cdef = null;
    // var cdef = termgenie.cdef("GO:0065007");
    // cdef.differentium("is_a", p, go);
    // cdef.differentium("is_a", regulator, go);
    termgenie.createTerm(label, definition, synonyms, cdef);
  };
};]]>
		</rule>
	</template>

	<template name="part_of_cell_component">
		<description>cell components part of other cell components
		</description>
		<ontology name="GeneOntology" />
		<obonamespace>cellular_component</obonamespace>
		<fields>
			<field name="part" required="true">
				<ontology name="GeneOntology">
					<branch>cellular_component</branch>
				</ontology>
			</field>
			<field name="whole" required="true">
				<ontology name="GeneOntology">
					<branch>cellular_component</branch>
				</ontology>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var p = termgenie.getSingleTerm("part", go);
  var w = termgenie.getSingleTerm("whole", go);
  var check = termgenie.checkGenus(p, "GO:0005575", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  check = termgenie.checkGenus(w, "GO:0005575", go);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(p, go) + " " + termgenie.name(w, go);
  var definition = "Any "+termgenie.name(p, go)+" that is part of a "+termgenie.name(w, go)+".";
  var synonyms = termgenie.synonyms(null, p, go, " of ", w, go, null, label);
  var cdef = termgenie.cdef(p);
  cdef.differentium("part_of", w, go);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>

	<template name="protein_binding">
		<description>binding to a protein</description>
		<ontology name="GeneOntology" />
		<external>
			<ontology name="ProteinOntology"/>
		</external>
		<obonamespace>biological_process</obonamespace>
		<requires>molecular_function_xp_protein.obo</requires>
		<fields>
			<field name="target" required="true">
				<ontology name="ProteinOntology" />
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var pro = ProteinOntology;
  var x = termgenie.getSingleTerm("target", pro);
  var check = termgenie.checkGenus(x, "PR:000000001", pro);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(x, pro) + " binding";
  var definition = "Interacting selectively and non-covalently with  "+termgenie.name(x, pro)+".";
  var synonyms = termgenie.synonyms(null, x, pro, " binding", label);
  var cdef = termgenie.cdef("GO:0005488");
  cdef.differentium("OBO_REL:results_in_binding_of", x, pro);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>

	<template name="metazoan_development">
		<description>development of an animal anatomical structure</description>
		<ontology name="GeneOntology" />
		<external>
			<ontology name="Uberon"/>
		</external>
		<obonamespace>biological_process</obonamespace>
		<requires>biological_process_xp_uber_anatomy.obo</requires>
		<fields>
			<field name="target" required="true">
				<ontology name="Uberon" />
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var uberon = Uberon;
  var x = termgenie.getSingleTerm("target", uberon);
  var check = termgenie.checkGenus(x, "UBERON:0001062", uberon);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(x, uberon) + " development";
  var definition = "The process whose specific outcome is the progression of "+
                   termgenie.refname(x, uberon)+
                   " over time, from its formation to the mature structure.";
  var synonyms = termgenie.synonyms(null, x, uberon, " development", label);
  var cdef = termgenie.cdef("GO:0032502";
  cdef.differentium("OBO_REL:results_in_complete_development_of", x, uberon);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>

	<template name="metazoan_morphogenesis">
		<description>morphogenesis of an animal anatomical structure</description>
		<ontology name="GeneOntology" />
		<external>
			<ontology name="Uberon"/>
		</external>
		<obonamespace>biological_process</obonamespace>
		<requires>biological_process_xp_uber_anatomy.obo</requires>
		<fields>
			<field name="target" required="true">
				<ontology name="Uberon"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var uberon = Uberon;
  var x = termgenie.getSingleTerm("target", uberon);
  var check = termgenie.checkGenus(x, UBERON0001062, uberon);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(x, uberon) + " morphogenesis";
  var definition = "The developmental process by which "+termgenie.refname(x, uberon)+" is generated and organized.";
  var synonyms = termgenie.synonyms(null, x, uberon, " morphogenesis", label);
  var cdef = termgenie.cdef("GO:0009653");
  cdef.differentium("OBO_REL:results_in_morphogenesis_of", x, uberon);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>

	<template name="plant_development">
		<description>development of a plant anatomical structure</description>
		<ontology name="GeneOntology" />
		<external>
			<ontology name="PO"/>
		</external>
		<obonamespace>biological_process</obonamespace>
		<requires>biological_process_xp_plant_anatomy.obo</requires>
		<fields>
			<field name="target" required="true">
				<ontology name="PO"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var plant = PO;
  var x = termgenie.getSingleTerm("target", plant);
  var check = termgenie.checkGenus(x, "PO:0025131", plant);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(x, plant) + " development";
  var definition = "The process whose specific outcome is the progression of "+
                   termgenie.refname(x, plant)+
                   " over time, from its formation to the mature structure.";
  var synonyms = termgenie.synonyms(null, x, plant, " development", label);
  var cdef = termgenie.cdef("GO:0032502");
  cdef.differentium("OBO_REL:results_in_complete_development_of", x, plant);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>

	<template name="plant_morphogenesis">
		<description>morphogenesis of a plant animal anatomical structure</description>
		<ontology name="GeneOntology" />
		<external>
			<ontology name="PO"/>
		</external>
		<obonamespace>biological_process</obonamespace>
		<requires>biological_process_xp_plant_anatomy.obo</requires>
		<fields>
			<field name="target" required="true">
				<ontology name="PO"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var plant = PO;
  var x = termgenie.getSingleTerm("target", plant);
  var check = termgenie.checkGenus(x, PO0025131, plant);
  if (check.isGenus() !== true) {
    termgenie.error(check.error());
    return;
  }
  var label = termgenie.name(x, plant) + " morphogenesis";
  var definition = "The developmental process by which "+termgenie.refname(x, plant)+" is generated and organized.";
  var synonyms = termgenie.synonyms(null, x, plant, " morphogenesis", label);
  var cdef = termgenie.cdef("GO:0009653");
  cdef.differentium("OBO_REL:results_in_morphogenesis_of", x, plant);
  termgenie.createTerm(label, definition, synonyms, cdef);
};]]>
		</rule>
	</template>

	<template name="structural_protein_complex">
		<description>protein complex defined structurally</description>
		<ontology name="GeneOntology" />
		<external>
			<ontology name="ProteinOntology"/>
		</external>
		<obonamespace>cellular_component</obonamespace>
		<!-- <requires>cellular_component_xp_protein.obo</requires>  -->
		<fields>
			<field name="unit" required="true">
				<cardinality>2..N</cardinality>
				<ontology name="ProteinOntology" />
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var pro = ProteinOntology;
  var terms = getTerms("unit", pro);
  var label = "";
  for(var i=0; i<terms.length; i+= 1) {
    var check = termgenie.checkGenus(terms[i], "PR:000000001", pro);
    if (check.isGenus() !== true) {
      termgenie.error(check.error());
      return;
    }
    if (i > 1) {
      label += "-"
    }
    label += termgenie.name(terms[i]);
  }
  label += " complex";
  var definition = termgenie.definition("Any protein complex consisting of ",list, pro, ", ",".");
  var synonyms = termgenie.synonyms(null, list, pro, "-", " complex", label);
  var cdef = termgenie.cdef("GO:0043234");
  cdef.differentium("has_part", list, pro);
  termgenie.createTerm(label, definition, synonyms, cdef, pro);
};]]>
		</rule>
	</template>

	<template name="abnormal_morphology">
		<description>Abnormal X morphology</description>
		<ontology name="HumanPhenotype" />
		<external>
			<ontology name="FMA"/>
			<ontology name="PATO"/>
		</external>
		<obonamespace>medical_genetics</obonamespace>
		<requires>human-phenotype-ontology_xp.obo</requires>
		<fields>
			<field name="target" required="true">
				<ontology name="FMA"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var a = termgenie.getSingleTerm("target", FMA);
  if (a === null) {
    termgenie.error("The specified term does not correspond to the pattern");
    return;
  }
  var label = "Abnormal "+termgenie.name(a, FMA) + "  morphology";
  var definition = "Any morphological abnormality of a "+termgenie.name(a, FMA)+".";
  var synonyms = null; // TODO
  var cdef = termgenie.cdef('PATO:0000051', PATO);
  cdef.differentium("OBO_REL:inheres_in", a, FMA);
  termgenie.createTerm(label, definition, synonyms, cdef, HumanPhenotype);
};]]>
		</rule>
	</template>

	<template name="hpo_entity_quality">
		<description>basic EQ template</description>
		<ontology name="HumanPhenotype"/>
		<external>
			<ontology name="FMA"/>
			<ontology name="PATO"/>
		</external>
		<obonamespace>medical_genetics</obonamespace>
		<requires>human-phenotype-ontology_xp.obo</requires>
		<fields>
			<field name="entity" required="true">
				<ontology name="FMA"/>
			</field>
			<field name="quality" required="true">
				<ontology name="PATO"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var e = termgenie.getSingleTerm("entity", FMA);
  var q = termgenie.getSingleTerm("quality", PATO);
  if (e === null || q === null) {
    termgenie.error("The specified terms do not correspond to the pattern");
    return;
  }
  var label = termgenie.name(q, PATO) + " " + termgenie.name(e, FMA);
  var definition = "Any "+termgenie.name(e, FMA)+" that is  "+termgenie.name(q, PATO)+".";
  var synonyms = null; // TODO
  var cdef = termgenie.cdef(q, PATO); // TODO check if this the correct genus
  cdef.differentium("OBO_REL:inheres_in", e, FMA);
  termgenie.createTerm(label, definition, synonyms, cdef, HumanPhenotype);
};]]>
		</rule>
	</template>

	<template name="omp_entity_quality">
		<description>basic EQ template</description>
		<ontology name="OMP"/>
		<external>
			<ontology name="GeneOntology"/>
			<ontology name="PATO"/>
		</external>
		<obonamespace>omp</obonamespace>
		<fields>
			<field name="entity" required="true">
				<ontology name="GeneOntology"/>
			</field>
			<field name="quality" required="true">
				<ontology name="PATO"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var e = termgenie.getSingleTerm("entity", go);
  var q = termgenie.getSingleTerm("quality", PATO);
  if (e == null ||  q == null) {
    // check branch
    termgenie.error("The specified terms do not correspond to the pattern");
    return;
  }
  var label = termgenie.name(q, PATO) + " of " + termgenie.name(e, go);
  var definition = "Any "+termgenie.name(q, PATO)+" of "+termgenie.name(e, go)+".";
  var synonyms = null; // TODO
  var cdef = termgenie.cdef(q, PATO);
  cdef.differentium("OBO_REL:inheres_in", e, go);
  termgenie.createTerm(label, definition, synonyms, cdef, OMP);
};]]>
		</rule>
	</template>

	<template name="metazoan_location_specific_cell">
		<description>A cell type differentiated by its anatomical location (animals)</description>
		<ontology name="CL"/>
		<external>
			<ontology name="Uberon"/>
		</external>
		<obonamespace>cell</obonamespace>
		<fields>
			<field name="cell" required="true">
				<ontology name="CL"/>
			</field>
			<field name="location" required="true">
				<ontology name="Uberon"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var c = termgenie.getSingleTerm("cell", CL);
  var a = termgenie.getSingleTerm("location", Uberon);
  if (c == null || a == null) {
    // check branch
    termgenie.error("The specified terms do not correspond to the pattern");
    return;
  }
  var label = termgenie.name(a, Uberon) + " " + termgenie.name(c, CL);
  var definition = "Any "+termgenie.name(c, CL)+" that is part of a "+termgenie.name(a, Uberon)+".";
  var synonyms = null; // TODO
  var cdef = termgenie.cdef(c);
  cdef.differentium("part_of", a, Uberon);
  termgenie.createTerm(label, definition, synonyms, cdef, CL);
};]]>
		</rule>
	</template>

	<template name="cell_by_surface_marker">
		<description>A cell type differentiated by proteins or complexes on the plasma membrane</description>
		<ontology name="CL"/>
		<external>
			<ontology name="ProteinOntology"/>
			<ontology name="GeneOntology"/>
		</external>
		<fields>
			<field name="cell" required="true">
				<ontology name="CL"/>
			</field>
			<field name="membrane_part" required="true">
				<ontology name="ProteinOntology"/>
				<ontology name="GeneOntology">
					<branch>cellular_component</branch>
				</ontology>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var go = GeneOntology;
  var pro = ProteinOntology;
  var c = termgenie.getSingleTerm("cell", CL);
  var p = termgenie.getSingleTerm("membrane_part", pro, go);
  if (c == null || p == null || !(genus(p, "GO:0032991", go) || genus(p, null, pro))) {
    // check branch
    termgenie.error("The specified terms do not correspond to the pattern");
    return;
  }
  var label = termgenie.name(p, pro, go) + " " + termgenie.name(c, CL);
  var definition = "Any "+termgenie.name(c, CL)+" that has "+termgenie.name(p, pro, go)+" on the plasma membrane.";
  var synonyms = null; // TODO
  var cdef = termgenie.cdef(c);
  cdef.differentium("has_plasma_membrane_part", p, pro, go);
  cdef.property("multivalued(has_plasma_membrane_part)");
  cdef.property("any_cardinality(has_plasma_membrane_part)");
  termgenie.createTerm(label, definition, synonyms, cdef, CL);
};]]>
		</rule>
	</template>

	<template name="metazoan_location_specific_anatomical_structure">
		<description>location-specific anatomical structure</description>
		<ontology name="Uberon"/>
		<obonamespace>uberon</obonamespace>
		<fields>
			<field name="part" required="true">
				<ontology name="Uberon"/>
			</field>
			<field name="whole" required="true">
				<ontology name="Uberon"/>
			</field>
			<field name="Name" />
			<field name="Definition" />
			<field name="DefX_Ref">
				<cardinality>1..N</cardinality>
			</field>
			<field name="Comment" />
		</fields>
		<rule> <![CDATA[
function run() {
  var p = termgenie.getSingleTerm("part", Uberon);
  var w = termgenie.getSingleTerm("whole", Uberon);
  if (p == null || w == null) {
    // check branch
    termgenie.error("The specified terms do not correspond to the pattern");
    return;
  }
  var label = termgenie.name(w, Uberon) + " " + termgenie.name(p, Uberon);
  var definition = "Any "+termgenie.name(p, Uberon)+" that is part of a "+termgenie.name(w, Uberon)+".";
  var synonyms = termgenie.synonyms(null, p, Uberon, " of ", w, Uberon, null, label);
  var cdef = termgenie.cdef(p);
  cdef.differentium("part_of", w, Uberon);
  termgenie.createTerm(label, definition, synonyms, cdef, Uberon);
};]]>
		</rule>
	</template>
</termgenietemplates>