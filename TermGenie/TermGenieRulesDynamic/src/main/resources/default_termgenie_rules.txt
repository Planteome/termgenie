TEMPLATE
name	all_regulation
displayname	regulation: biological_process
description	Select all three subtemplates to generate terms for regulation, negative regulations and positive regulation (for biological processes). Names, synonyms and definitions are all generated automatically
ontology	GeneOntology
#
FIELD
name	target
required	true
prefixes	regulation	negative_regulation	positive_regulation
ontology	GeneOntology	biological_process
#
FIELD
name	DefX_Ref
cardinality	1..N
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


TEMPLATE
name	all_regulation_mf
displayname	regulation: molecular_function
description	Select all three subtemplates to generate terms for regulation, negative regulations and positive regulation (for molecular functions). Names, synonyms and definitions are all generated automatically
ontology	GeneOntology
#
FIELD
name	target
required	true
prefixes	regulation	negative_regulation	positive_regulation
ontology	GeneOntology	molecular_function
#
FIELD
name	DefX_Ref
cardinality	1..N
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


TEMPLATE
name	involved_in
description	processes involved in other processes
hint	[part] involved in [whole]
ontology	GeneOntology
#
FIELD
name	part
required	true
ontology	GeneOntology	biological_process
#
FIELD
name	whole
required	true
ontology	GeneOntology	biological_process
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var p = termgenie.getSingleTerm("part", go);
  var w = termgenie.getSingleTerm("whole", go);
  var check = termgenie.checkGenus(p, "GO:0008150", go, input);
  if (check.isGenus() === false) {
    return check.error();
  }
  var check = termgenie.checkGenus(w, "GO:0008150", go);
  if (check.isGenus() === false) {
    return check.error();
  }
  var label = termgenie.name(p, go) + " involved in " + termgenie.name(w, go);
  var definition = "Any "+termgenie.name(p, go)+" that is involved in "+termgenie.name(w, go)+".";
  var synonyms = termgenie.synonyms(null, p, go, " of ", w, go, null, label);
  var cdef = termgenie.cdef(p, go);
  cdef.addDifferentium("part_of", w, go);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);


TEMPLATE
name	occurs_in
description	processes occurring in parts of the cell
ontology	GeneOntology
#
FIELD
name	process
required	true
ontology	GeneOntology	biological_process
#
FIELD
name	location
required	true
ontology	GeneOntology	cellular_component
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var p = termgenie.getSingleTerm("process", go);
  var c = termgenie.getSingleTerm("location", go);

  var check = termgenie.checkGenus(p, "GO:0008150", go);
  if (check.isGenus() !== true) {
    return check.error();
  }
  check = checkGenus(c, "GO:0005575", go);
  if (check.isGenus() !== true) {
    return check.error();
  }
  var label = termgenie.name(p, go) + " in " + termgenie.name(c, go);
  var definition = "Any "+termgenie.name(p, go)+" that takes place in "+termgenie.name(c, go)+".";
  var synonyms = termgenie.synonyms(null, p, go, " in ", c, go, null, label);
  var cdef = termgenie.cdef(p, go);
  cdef.addDifferentium("OBO_REL:occurs_in", c, go);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);

TEMPLATE
name	part_of_cell_component
description	cell components part of other cell components
ontology	GeneOntology
#
FIELD
name	part
required	true
ontology	GeneOntology	cellular_component
#
FIELD
name	whole
required	true
ontology	GeneOntology	cellular_component
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var p = termgenie.getSingleTerm("part", go);
  var w = termgenie.getSingleTerm("whole", go);
  var check = termgenie.checkGenus(p, "GO:0005575", go);
  if (check.isGenus() !== true) {
    return check.error();
  }
  check = termgenie.checkGenus(w, "GO:0005575", go);
  if (check.isGenus() !== true) {
    return check.error();
  }
  var label = termgenie.name(p, go) + " " + termgenie.name(w, go);
  var definition = "Any "+termgenie.name(p, go)+" that is part of a "+termgenie.name(w, go)+".";
  var synonyms = termgenie.synonyms(null, p, go, " of ", w, go, null, label);
  var cdef = termgenie.cdef(p, go);
  cdef.addDifferentium("part_of", w, go);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);


TEMPLATE
name	protein_binding
description	binding to a protein
ontology	GeneOntology
#
FIELD
name	target
required	true
ontology	ProteinOntology
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var pro = ProteinOntology;
  var x = termgenie.getSingleTerm("target", pro);
  var check = termgenie.checkGenus(x, "PR:000000001", pro);
  if (check.isGenus() !== true) {
    return check.error();
  }
  var label = termgenie.name(x, pro) + " binding";
  var definition = "Interacting selectively and non-covalently with  "+termgenie.name(x, pro)+".";
  var synonyms = termgenie.synonyms(null, x, pro, " binding", label);
  var cdef = termgenie.cdef("GO:0005488", go);
  cdef.addDifferentium("OBO_REL:results_in_binding_of", x, pro);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);


TEMPLATE
name	metazoan_development
description	development of an animal anatomical structure
ontology	GeneOntology
#
FIELD
name	target
required	true
ontology	Uberon
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var uberon = Uberon;
  var x = termgenie.getSingleTerm("target", uberon);
  var check = termgenie.checkGenus(x, "UBERON:0001062", uberon);
  if (check.isGenus() !== true) {
    return check.error();
  }
  var label = termgenie.name(x, uberon) + " development";
  var definition = "The process whose specific outcome is the progression of "+
                   termgenie.refname(x, uberon)+
                   " over time, from its formation to the mature structure.";
  var synonyms = termgenie.synonyms(null, x, uberon, " development", label);
  var cdef = termgenie.cdef("GO:0032502", go);
  cdef.addDifferentium("OBO_REL:results_in_complete_development_of", x, uberon);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);


TEMPLATE
name	metazoan_morphogenesis
description	morphogenesis of an animal anatomical structure
ontology	GeneOntology
#
FIELD
name	target
required	true
ontology	Uberon
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var uberon = Uberon;
  var x = termgenie.getSingleTerm("target", uberon);
  var check = termgenie.checkGenus(x, UBERON0001062, uberon);
  if (check.isGenus() !== true) {
    return check.error();
  }
  var label = termgenie.name(x, uberon) + " morphogenesis";
  var definition = "The developmental process by which "+termgenie.refname(x, uberon)+" is generated and organized.";
  var synonyms = termgenie.synonyms(null, x, uberon, " morphogenesis", label);
  var cdef = termgenie.cdef("GO:0009653", go);
  cdef.addDifferentium("OBO_REL:results_in_morphogenesis_of", x, uberon);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);


TEMPLATE
name	plant_development
description	development of a plant anatomical structure
ontology	GeneOntology
#
FIELD
name	target
required	true
ontology	PO
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var plant = PO;
  var x = termgenie.getSingleTerm("target", plant);
  var check = termgenie.checkGenus(x, "PO:0025131", plant);
  if (check.isGenus() !== true) {
    return check.error();
  }
  var label = termgenie.name(x, plant) + " development";
  var definition = "The process whose specific outcome is the progression of "+
                   termgenie.refname(x, plant)+
                   " over time, from its formation to the mature structure.";
  var synonyms = termgenie.synonyms(null, x, plant, " development", label);
  var cdef = termgenie.cdef("GO:0032502", go);
  cdef.addDifferentium("OBO_REL:results_in_complete_development_of", x, plant);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);


TEMPLATE
name	plant_morphogenesis
description	morphogenesis of a plant animal anatomical structure
ontology	GeneOntology
#
FIELD
name	target
required	true
ontology	PO
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var plant = PO;
  var x = termgenie.getSingleTerm("target", plant);
  var check = termgenie.checkGenus(x, PO0025131, plant);
  if (check.isGenus() !== true) {
    return check.error();
  }
  var label = termgenie.name(x, plant) + " morphogenesis";
  var definition = "The developmental process by which "+termgenie.refname(x, plant)+" is generated and organized.";
  var synonyms = termgenie.synonyms(null, x, plant, " morphogenesis", label);
  var cdef = termgenie.cdef("GO:0009653", go);
  cdef.addDifferentium("OBO_REL:results_in_morphogenesis_of", x, plant);
  return termgenie.createTermList(label, definition, synonyms, cdef, go);

TEMPLATE
name	structural_protein_complex
description	protein complex defined structurally
ontology	GeneOntology
#
FIELD
name	unit
required	true
cardinality	2..N
ontology	ProteinOntology
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
  var go = GeneOntology;
  var pro = ProteinOntology;
  var terms = getTerms(input, "unit", pro);
  var label = "";
  for(var i=0; i<terms.length; i+= 1) {
    var check = termgenie.checkGenus(terms[i], "PR:000000001", pro);
    if (check.isGenus() !== true) {
      return check.error();
    }
    if (i > 1) {
      label += "-"
    }
    label += termgenie.name(terms[i]);
  }
  label += " complex";
  var definition = termgenie.definition("Any protein complex consisting of ",list, pro, ", ",".");
  var synonyms = termgenie.synonyms(null, list, pro, "-", " complex", label);
  var cdef = termgenie.cdef("GO:0043234", go);
  cdef.addDifferentium("has_part", list, pro);
  return termgenie.createTermList(label, definition, synonyms, cdef, pro);


TEMPLATE
name	abnormal_morphology
description	Abnormal X morphology
ontology	HumanPhenotype
#
FIELD
name	target
required	true
ontology	FMA
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


TEMPLATE
name	hpo_entity_quality
description	basic EQ template
ontology	HumanPhenotype
#
FIELD
name	entity
required	true
ontology	FMA
#
FIELD
name	quality
required	true
ontology	PATO
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


TEMPLATE
name	omp_entity_quality
description	basic EQ template
ontology	OMP
#
FIELD
name	entity
required	true
ontology	GeneOntology
#
FIELD
name	quality
required	true
ontology	PATO
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


TEMPLATE
name	metazoan_location_specific_cell
description	A cell type differentiated by its anatomical location (animals)
ontology	CL
#
FIELD
name	cell
required	true
ontology	CL
#
FIELD
name	location
required	true
ontology	Uberon
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


TEMPLATE
name	cell_by_surface_marker
description	A cell type differentiated by proteins or complexes on the plasma membrane
ontology	CL
#
FIELD
name	cell
required	true
ontology	CL
#
FIELD
name	membrane_part
required	true
cardinality	1..N
ontology	ProteinOntology|GeneOntology	cellular_component
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


TEMPLATE
name	metazoan_location_specific_anatomical_structure
description	location-specific anatomical structure
ontology	Uberon
#
FIELD
name	part
required	true
ontology	Uberon
#
FIELD
name	whole
required	true
ontology	Uberon
#
FIELD
name	Name
#
FIELD
name	Definition
#
FIELD
name	DefX_Ref
cardinality	1..N
#
FIELD
name	Comment
#
RULE
Dummy Rule
 Dummy Name Rule
2nd line


